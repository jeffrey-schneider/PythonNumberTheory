import unittest
from NumberTheory import *
from Primes import *

class Test(unittest.TestCase):

    def setUp(self):
        print("In method: ", self._testMethodName , " " , self._testMethodDoc)        


    def tearDown(self):
        pass

    def test_is_semi_prime(self):                 
        instance = Primes(74)        
        self.assertTrue(instance.is_semi_prime())        
        instance.set_the_number(92)     
        self.assertFalse(instance.is_semi_prime())
        self.assertTrue(instance.is_semi_prime(15))
        self.assertFalse(instance.is_semi_prime(84))

    
    def test_get_prime_factors(self):
        instance = Primes(3600)
        result = instance.get_prime_factors()
        expected = [2, 2, 2, 2, 3, 3, 5, 5]
        self.assertListEqual(expected, result,"Prime Factors list should be equal")
        self.assertCountEqual(expected, result, "Prime Factors list count should be equal")
        result = instance.get_prime_factors(42)
        expected = [2, 3, 7]
        self.assertListEqual(expected, result,"Prime Factors list should be equal")
        self.assertCountEqual(expected, result, "Prime Factors list count should be equal")


    def test_countDigit(self):
        instance = Primes(3600)
        result = instance.countDigit(3600)
        expected = 4
        self.assertEqual(result, expected)


    def test_is_brilliant(self):
        instance = Primes(209)
        self.assertTrue(instance.is_brilliant())
        self.assertTrue(instance.is_brilliant(247))
        instance.set_the_number(189)
        self.assertFalse(instance.is_brilliant())
        self.assertFalse(instance.is_brilliant(120))


    def test_is_emirpimeses(self):
        instance = Primes(143)
        self.assertTrue(instance.is_emirpimeses())
        self.assertTrue(instance.is_emirpimeses(205))
        instance.set_the_number(154)
        self.assertFalse(instance.is_emirpimeses())
        self.assertFalse(instance.is_emirpimeses(5130))


    def test_is_chen_prime(self):
        instance = Primes(257)
        self.assertTrue(instance.is_chen_prime())
        self.assertTrue(instance.is_chen_prime(9209))
        instance.set_the_number(234)
        self.assertFalse(instance.is_chen_prime())
        self.assertFalse(instance.is_chen_prime(3776))

    def test_is_emirp(self):
        instance = Primes(311)
        self.assertTrue(instance.is_emirp())
        self.assertTrue(instance.is_emirp(12149))
        self.assertTrue(instance.is_emirp(7219))
        instance.set_the_number(7756)
        self.assertFalse(instance.is_emirp())
        self.assertFalse(instance.is_emirp(35))
        self.assertFalse(instance.is_emirp(11954))

    def test_is_good_prime(self):
        instance = Primes(853)
        self.assertTrue(instance.is_good_prime())
        self.assertTrue(instance.is_good_prime(84053))
        self.assertTrue(instance.is_good_prime(10847))
        instance = Primes(3000)
        self.assertFalse(instance.is_good_prime())
        self.assertFalse(instance.is_good_prime(7521))
        self.assertFalse(instance.is_good_prime(113))       

    def test_get_previous_prime(self):
        instance = Primes(199)
        expected = 197
        result = instance.get_previous_prime(199)
        self.assertEqual(expected, result)
        expected = 1181
        result = instance.get_previous_prime(1187)
        self.assertEqual(expected, result)


    def test_get_previous_prime_inclusive(self):
        instance = Primes(199)
        expected = 199
        result = instance.get_previous_prime_inclusive()  #passed number is prime
        self.assertEqual(expected, result)
        expected = 211
        result = instance.get_previous_prime_inclusive(211)  #passed number is prime
        self.assertEqual(expected, result)
        result = instance.get_previous_prime_inclusive(230) #passed number is not prime
        expected = 229
        self.assertEqual(expected, result)
        expected = 230
        self.assertNotEqual(expected, result)


    def test_get_next_prime(self):
        instance = Primes(199)
        expected = 211
        result = instance.get_next_prime()
        self.assertEqual(expected, result)
        result = instance.get_next_prime(211)
        expected = 223
        self.assertEqual(expected, result)
        expected = 211
        self.assertNotEqual(expected, result)

    def test_get_next_prime_inclusive(self):
        instance = Primes(198)
        expected = 199
        result = instance.get_next_prime_inclusive()
        self.assertEqual(expected, result)

        result = instance.get_next_prime_inclusive(211)
        expected = 211        
        self.assertEqual(expected, result)


    def test_a_pointer_prime(self):
        instance = Primes(293)
        self.assertTrue(instance.is_a_pointer_prime())
        self.assertTrue(instance.is_a_pointer_prime(3221))
        self.assertTrue(instance.is_a_pointer_prime(149033))
        self.assertFalse(instance.is_a_pointer_prime(121508))                        
        
        instance.set_the_number(161123)
        self.assertTrue(instance.is_a_pointer_prime())
        instance.set_the_number(294)
        self.assertFalse(instance.is_a_pointer_prime())


    def test_m_pointer_prime(self):
        instance = Primes(1231)
        self.assertTrue(instance.is_m_pointer_prime())
        self.assertTrue(instance.is_m_pointer_prime(611113))
        self.assertTrue(instance.is_m_pointer_prime(13121117))
        self.assertTrue(instance.is_m_pointer_prime(1123))
        self.assertFalse(instance.is_m_pointer_prime(294))

    
    def test_is_interprime(self):
        instance = Primes(120)
        self.assertTrue(instance.is_inter_prime())
        self.assertTrue(instance.is_inter_prime(1482))
        self.assertTrue(instance.is_inter_prime(2802))
        instance.set_the_number(1020)
        self.assertTrue(instance.is_inter_prime())

        self.assertFalse(instance.is_inter_prime(1101))
        self.assertFalse(instance.is_inter_prime(121))


    def test_get_prime_factors(self):
        instance = Primes(12)
        result = instance.get_distinct_prime_factors()
        expected = [2, 3,]
        self.assertListEqual(expected, result,"Prime Factors list should be equal")
        self.assertCountEqual(expected, result, "Prime Factors count should be equal")

        result = instance.get_distinct_prime_factors(60)
        expected = [2, 3, 5,]
        self.assertListEqual(expected, result,"Prime Factors list should be equal")
        self.assertCountEqual(expected, result, "Prime Factors count should be equal")

    @unittest.skip("Not ready to test, skipping")
    def test_get_prime_lucky_numbers(self):
        test_desc = "Get Prime Lucky Numbers "
        instance = Primes(150)
        result = instance.get_prime_lucky_numbers()
        expected = [1, 3, 7, 13, 31, 37, 43, 67, 73, 79, 127]
        self.assertListEqual(expected, result, test_desc + " list should be equal")
        self.assertCountEqual(expected, result, test_desc + " count should be equal")

        

        







    @unittest.skip("Not ready to test, skipping")
    def test_to_skip(self):
        pass

if __name__ == "__main__":
    #import sys;sys.argv = ['', 'Test.testName']
    unittest.main()
